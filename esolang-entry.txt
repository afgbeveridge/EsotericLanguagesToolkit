'''WARP''' is an object and stack based language, created by [[User:Aldous zodiac|Aldous zodiac]] ([[User talk:Aldous zodiac|talk]]) in May 2013. All numerics are signed, integral and expressed in hexatridecimal (base 36) notation, unless the radix system is changed within an executing program. WARP is a (weak) recursive acronym, WARP And Run Program - so called because it is expected that interpreters randomize 
the source program after each command is executed.
 
==Objects and expressions==
Basic pseudo grammatical terms:
* <object>: [a-z]{2}
* <sobject>: <object> | !
* <base expr>: -{0,1}[0-9,A-Z]+ | <object> | "...." | ~ | `
* <expr>: <base expr> | ! | _
* <label>: [a-z]+ | .

==Operators==
A few general purpose operators exist.
{| class="wikitable"
!Command
!Description
|-
|=&lt;object&gt;&lt;expr&gt;
|assign &lt;expr&gt; to &lt;object&gt;
|-
|>&lt;sobject&gt;&lt;expr&gt;
|increment &lt;sobject&gt; by &lt;expr&gt; and update &lt;sobject&gt;. If &lt;expr&gt; is non numeric, convert if possible, otherwise treat as 

0. If &lt;sobject&gt; is the pop command, use the stack as the source object and push the result onto the stack   
|-
|<&lt;sobject&gt;&lt;expr&gt;
|Decrement &lt;sobject&gt; by &lt;expr&gt; and update &lt;sobject&gt;. If &lt;expr&gt; is non numeric, convert if possible, otherwise treat as 

0
|-
|$&lt;sobject&gt;&lt;expr&gt;
|Divide &lt;sobject&gt; by &lt;expr&gt; and update &lt;sobject&gt;. If &lt;expr&gt; is non numeric, convert if possible, or if 0, treat it as 

1
|-
|&amp;&lt;sobject&gt;&lt;expr&gt;
|Multiply &lt;sobject&gt; by &lt;expr&gt; and update &lt;sobject&gt;. If &lt;expr&gt; is non numeric, convert if possible, otherwise treat as 

1 
|-
|:&lt;expr&gt;:&lt;expr&gt;
|Compare the first &lt;expr&gt; with the second &lt;expr&gt;. Push the result of the comparison onto the stack. 
0 means equal, -1 is less than, 1 greater than 
|-
|?&lt;expr&gt;?&lt;command&gt;
|Pop from the stack, and if that object equals &lt;expr&gt;, execute &lt;command&gt;.
|-
|<code><nowiki>+</nowiki></code>&lt;number&gt;
|Change the radix of numbers to &lt;number&gt; from now on
|}

==Stack manipulation==
There are several commands for stack manipulation.
{| class="wikitable"
!Command
!Description
|-
|%&lt;object&gt;
|treat &lt;object&gt; as the stack; takes string of content and push each atomic object onto the stack - pushed so that repeated popping and 

sending to output is the same object as 'treated'
|-
|<nowiki>|</nowiki>
|untreat the current stack
|-
|!
|pop
|-
|*&lt;base expr&gt;
|push &lt;base expr&gt;
|-
|]&lt;base expr&gt;
|Pop and push &lt;base expr&gt;
|-
|\
|Turn off auto stacking mode
|-
|;
|Duplicate the top of stack
|-
|'
|Rotate the top two stacks in the stack of stacks
|}

==Labels and movement==
WARP supports a simple label/jump set of commands.
{| class="wikitable"
!Command
!Description
|-
|@&lt;label&gt;
|Declare a named label
|-
|^&lt;expr&gt;&lt;&lt;label&gt;&lt;
|If &lt;expr&gt; == ., move to label unconditionally. If &lt;expr&gt; is zero or false, or represents an empty object, fall through
|}

==Input and output==
WARP can interact with any existing input and output mechanisms.
{| class="wikitable"
!Command
!Description
|-
|(&lt;expr&gt;
|Output &lt;expr&gt; as a character
|-
|)&lt;expr&gt;
|Output &lt;expr&gt; in its native form
|-
|,
|Accept user input and place onto the stack
|-
|_
|a symbolic reference to the current stack
|}

==Source access==
Access to the source is provided as well as the current traversal map.
{| class="wikitable"
!Command
!Description
|-
|~
|The current randomized source
|-
|`
|The current traversal map of the randomized source
|}

==Environment and execution==
First, the run time environment.
===Environment===
WARP has initially one, unbound or system, stack. Using the % operator, a bound object can usurp the unbound stack, until the | operator 
removes it. Think of it is as being similar to a stack of stacks. Issuing a | operator against the unbound stack will mean that the 
environment enters 'stackless' mode. All further stack based operations will not operate as expected, nor generate an error. There is no 
formal limit to the size and number of stacks and similarly in relation to source code.

Note that all WARP objects are shared across the stack of stacks; if an assignment to an object xx occurs, and then a new stack 
is created, the value of xx will be available in the new stack context. 

===Execution===
Each source advance generates a random rewrite of the source, along with an attendant 'unscramble' map. Could be used for amusing output 
effects.

==Examples==

Hello World
 )"Hello World!"

Hello World #2
 =aa"Hello World!"%aa@x(!^_x| 

Quine
 )~

99 bottles of beer
 *"No more bottles of beer on the wall"+A=nb99@f=pl" ":nb:1?1?=pl"s" )nb)" bottle")pl)" of beer on the wall, ")nb)" bottle")pl
 )" of beer")", Take one down, and pass it around"(13(10<nb1^nbf)!

Fibonacci
 *1=na1=li1Z@z;)!)" ">!na;<!na=na!<li1^liz

Collatz conjecture #1 (objects)
 =se24E0)"Hailstone sequence for ")se@a)se=rese$re2=inre&in2:in:se?-1?^.o=sere^.r@o&se3>se1@r:se:1?1?^.a

Collatz conjecture #2 (stack and objects)
 =se24E0)"Hailstone sequence for ")se@a)se*se$!2;&!2:!:se?-1?^.o=se!^.r@o!&se3>se1@r:se:1?1?^.a

Simple calculator (in decimal)
 +A)"WARP simple calculator: Enter q (as operator) to quit, c (as operator) to clear "(13(10
 =ac0@l)"Enter operator: ",=op!:op:"q"?0?^.e:op:"c"?0?^.c
 )"Enter operand: ",=nu!:op:"+"?0?>acnu:op:"-"?0?<acnu:op:"*"?0?&acnu:op:"/"?0?$acnu
 ^.p@c=ac0@p)ac(13(10^.l@e

Reverse a user entered string
 )"Enter a string to reverse: ",=st!%st@r=ch!'*ch'^_r'@p)!^_p|
==External Resources==
*[https://esotericinterpreters.codeplex.com/ A mostly functional interpreter]
